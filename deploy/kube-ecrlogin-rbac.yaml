apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-ecrlogin
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-ecrlogin
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "watch", "list", "create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-ecrlogin
subjects:
- kind: ServiceAccount
  name: kube-ecrlogin
  namespace: default
roleRef:
  kind: ClusterRole
  name: kube-ecrlogin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: kube-ecrlogin
spec:
  schedule: "0 */4 * * *"
  successfulJobsHistoryLimit: 0
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: kube-ecrlogin
          containers:
          - name: sidecar
            image: docker.io/levilutz/kube-ecrlogin-sidecar:latest
            imagePullPolicy: Always
            ports:
              - containerPort: 8080
            lifecycle:
              postStart:
                exec:
                  command:
                  - /wait_until_ready.sh
          - name: main
            image: docker.io/levilutz/kube-ecrlogin-main:latest
            imagePullPolicy: Always
            env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: kube-ecrlogin-aws
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: kube-ecrlogin-aws
                  key: AWS_SECRET_ACCESS_KEY
            - name: AWS_DEFAULT_REGION
              valueFrom:
                secretKeyRef:
                  name: kube-ecrlogin-aws
                  key: AWS_DEFAULT_REGION
            - name: AWS_ECR_SERVER
              valueFrom:
                secretKeyRef:
                  name: kube-ecrlogin-aws
                  key: AWS_ECR_SERVER
          restartPolicy: OnFailure
